/**
 * API title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventDetailsEntity from '../model/EventDetailsEntity';
import EventEntity from '../model/EventEntity';
import EventTypeEntity from '../model/EventTypeEntity';
import PostV1Events from '../model/PostV1Events';
import PostV1EventsEventIdAttendance from '../model/PostV1EventsEventIdAttendance';
import PostV1EventsEventIdMultipleRsvp from '../model/PostV1EventsEventIdMultipleRsvp';
import PutV1EventsIdRsvp from '../model/PutV1EventsIdRsvp';

/**
* Events service.
* @module api/EventsApi
* @version 0.0.1
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getV1Events operation.
     * @callback module:api/EventsApi~getV1EventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of events for the date range provided
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {String} startOn an iso8601 date (YYYY-MM-DD) indicating the beginning of the date range to include events
     * @param {String} endOn an iso8601 date (YYYY-MM-DD) indicating the end of the date range to include events
     * @param {module:api/EventsApi~getV1EventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventEntity}
     */
    getV1Events(xPartnerToken, xUserToken, startOn, endOn, callback) {
      let postBody = null;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling getV1Events");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling getV1Events");
      }
      // verify the required parameter 'startOn' is set
      if (startOn === undefined || startOn === null) {
        throw new Error("Missing the required parameter 'startOn' when calling getV1Events");
      }
      // verify the required parameter 'endOn' is set
      if (endOn === undefined || endOn === null) {
        throw new Error("Missing the required parameter 'endOn' when calling getV1Events");
      }

      let pathParams = {
      };
      let queryParams = {
        'start_on': startOn,
        'end_on': endOn
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventEntity;
      return this.apiClient.callApi(
        '/v1/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1EventsId operation.
     * @callback module:api/EventsApi~getV1EventsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventDetailsEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns detailed information about an event
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {Number} id 
     * @param {module:api/EventsApi~getV1EventsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventDetailsEntity}
     */
    getV1EventsId(xPartnerToken, xUserToken, id, callback) {
      let postBody = null;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling getV1EventsId");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling getV1EventsId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV1EventsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventDetailsEntity;
      return this.apiClient.callApi(
        '/v1/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1EventsTypes operation.
     * @callback module:api/EventsApi~getV1EventsTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTypeEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns event types available for a troop
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {module:api/EventsApi~getV1EventsTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTypeEntity}
     */
    getV1EventsTypes(xPartnerToken, xUserToken, callback) {
      let postBody = null;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling getV1EventsTypes");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling getV1EventsTypes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTypeEntity;
      return this.apiClient.callApi(
        '/v1/events/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1Events operation.
     * @callback module:api/EventsApi~postV1EventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventDetailsEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an event
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {module:model/PostV1Events} postV1Events 
     * @param {module:api/EventsApi~postV1EventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventDetailsEntity}
     */
    postV1Events(xPartnerToken, xUserToken, postV1Events, callback) {
      let postBody = postV1Events;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling postV1Events");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling postV1Events");
      }
      // verify the required parameter 'postV1Events' is set
      if (postV1Events === undefined || postV1Events === null) {
        throw new Error("Missing the required parameter 'postV1Events' when calling postV1Events");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventDetailsEntity;
      return this.apiClient.callApi(
        '/v1/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1EventsEventIdAttendance operation.
     * @callback module:api/EventsApi~postV1EventsEventIdAttendanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventDetailsEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Record attendance at an event
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {Number} eventId 
     * @param {module:model/PostV1EventsEventIdAttendance} postV1EventsEventIdAttendance 
     * @param {module:api/EventsApi~postV1EventsEventIdAttendanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventDetailsEntity}
     */
    postV1EventsEventIdAttendance(xPartnerToken, xUserToken, eventId, postV1EventsEventIdAttendance, callback) {
      let postBody = postV1EventsEventIdAttendance;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling postV1EventsEventIdAttendance");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling postV1EventsEventIdAttendance");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling postV1EventsEventIdAttendance");
      }
      // verify the required parameter 'postV1EventsEventIdAttendance' is set
      if (postV1EventsEventIdAttendance === undefined || postV1EventsEventIdAttendance === null) {
        throw new Error("Missing the required parameter 'postV1EventsEventIdAttendance' when calling postV1EventsEventIdAttendance");
      }

      let pathParams = {
        'event_id': eventId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventDetailsEntity;
      return this.apiClient.callApi(
        '/v1/events/{event_id}/attendance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1EventsEventIdMultipleRsvp operation.
     * @callback module:api/EventsApi~postV1EventsEventIdMultipleRsvpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventDetailsEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Record RSVPs for multiple members to an event
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {Number} eventId 
     * @param {module:model/PostV1EventsEventIdMultipleRsvp} postV1EventsEventIdMultipleRsvp 
     * @param {module:api/EventsApi~postV1EventsEventIdMultipleRsvpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventDetailsEntity}
     */
    postV1EventsEventIdMultipleRsvp(xPartnerToken, xUserToken, eventId, postV1EventsEventIdMultipleRsvp, callback) {
      let postBody = postV1EventsEventIdMultipleRsvp;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling postV1EventsEventIdMultipleRsvp");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling postV1EventsEventIdMultipleRsvp");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling postV1EventsEventIdMultipleRsvp");
      }
      // verify the required parameter 'postV1EventsEventIdMultipleRsvp' is set
      if (postV1EventsEventIdMultipleRsvp === undefined || postV1EventsEventIdMultipleRsvp === null) {
        throw new Error("Missing the required parameter 'postV1EventsEventIdMultipleRsvp' when calling postV1EventsEventIdMultipleRsvp");
      }

      let pathParams = {
        'event_id': eventId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventDetailsEntity;
      return this.apiClient.callApi(
        '/v1/events/{event_id}/multiple_rsvp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV1EventsIdRsvp operation.
     * @callback module:api/EventsApi~putV1EventsIdRsvpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventDetailsEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RSVP to an event
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {Number} id 
     * @param {module:model/PutV1EventsIdRsvp} putV1EventsIdRsvp 
     * @param {module:api/EventsApi~putV1EventsIdRsvpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventDetailsEntity}
     */
    putV1EventsIdRsvp(xPartnerToken, xUserToken, id, putV1EventsIdRsvp, callback) {
      let postBody = putV1EventsIdRsvp;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling putV1EventsIdRsvp");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling putV1EventsIdRsvp");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV1EventsIdRsvp");
      }
      // verify the required parameter 'putV1EventsIdRsvp' is set
      if (putV1EventsIdRsvp === undefined || putV1EventsIdRsvp === null) {
        throw new Error("Missing the required parameter 'putV1EventsIdRsvp' when calling putV1EventsIdRsvp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventDetailsEntity;
      return this.apiClient.callApi(
        '/v1/events/{id}/rsvp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
