/**
 * API title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PostV1UserAchievementsId from '../model/PostV1UserAchievementsId';

/**
* UserAchievements service.
* @module api/UserAchievementsApi
* @version 0.0.1
*/
export default class UserAchievementsApi {

    /**
    * Constructs a new UserAchievementsApi. 
    * @alias module:api/UserAchievementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getV1UserAchievements operation.
     * @callback module:api/UserAchievementsApi~getV1UserAchievementsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of achievements earned by users based on query parameters.               Query parameters can be combined as desired.               Award type id is required if achievement id is provided
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {Object} opts Optional parameters
     * @param {Number} [awardTypeId] 
     * @param {Number} [userId] 
     * @param {Number} [patrolId] 
     * @param {Number} [achievementId] 
     * @param {module:api/UserAchievementsApi~getV1UserAchievementsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV1UserAchievements(xPartnerToken, xUserToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling getV1UserAchievements");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling getV1UserAchievements");
      }

      let pathParams = {
      };
      let queryParams = {
        'award_type_id': opts['awardTypeId'],
        'user_id': opts['userId'],
        'patrol_id': opts['patrolId'],
        'achievement_id': opts['achievementId']
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/user_achievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1UserAchievementsId operation.
     * @callback module:api/UserAchievementsApi~getV1UserAchievementsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns achievment details, including requirements, for a given achievement
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {Number} id Id of the achievement being updated
     * @param {Number} awardTypeId Id of the Award Type for the achievement being updated
     * @param {module:api/UserAchievementsApi~getV1UserAchievementsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV1UserAchievementsId(xPartnerToken, xUserToken, id, awardTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling getV1UserAchievementsId");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling getV1UserAchievementsId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV1UserAchievementsId");
      }
      // verify the required parameter 'awardTypeId' is set
      if (awardTypeId === undefined || awardTypeId === null) {
        throw new Error("Missing the required parameter 'awardTypeId' when calling getV1UserAchievementsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'award_type_id': awardTypeId
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/user_achievements/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1UserAchievementsParameters operation.
     * @callback module:api/UserAchievementsApi~getV1UserAchievementsParametersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of possible values to be used in querying
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {module:api/UserAchievementsApi~getV1UserAchievementsParametersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV1UserAchievementsParameters(xPartnerToken, xUserToken, callback) {
      let postBody = null;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling getV1UserAchievementsParameters");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling getV1UserAchievementsParameters");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/user_achievements/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1UserAchievementsId operation.
     * @callback module:api/UserAchievementsApi~postV1UserAchievementsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update achievment details, including requirements, for a given achievement
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {Number} id Id of the user achievement being updated
     * @param {module:model/PostV1UserAchievementsId} postV1UserAchievementsId 
     * @param {module:api/UserAchievementsApi~postV1UserAchievementsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV1UserAchievementsId(xPartnerToken, xUserToken, id, postV1UserAchievementsId, callback) {
      let postBody = postV1UserAchievementsId;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling postV1UserAchievementsId");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling postV1UserAchievementsId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV1UserAchievementsId");
      }
      // verify the required parameter 'postV1UserAchievementsId' is set
      if (postV1UserAchievementsId === undefined || postV1UserAchievementsId === null) {
        throw new Error("Missing the required parameter 'postV1UserAchievementsId' when calling postV1UserAchievementsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/user_achievements/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
