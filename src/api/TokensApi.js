/**
 * API title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UserPrivilegesEntity from '../model/UserPrivilegesEntity';

/**
* Tokens service.
* @module api/TokensApi
* @version 0.0.1
*/
export default class TokensApi {

    /**
    * Constructs a new TokensApi. 
    * @alias module:api/TokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getV1Tokens operation.
     * @callback module:api/TokensApi~getV1TokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPrivilegesEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns detailed information about a user's privileges
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUserToken The token you received when you authenticated the user
     * @param {module:api/TokensApi~getV1TokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPrivilegesEntity}
     */
    getV1Tokens(xPartnerToken, xUserToken, callback) {
      let postBody = null;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling getV1Tokens");
      }
      // verify the required parameter 'xUserToken' is set
      if (xUserToken === undefined || xUserToken === null) {
        throw new Error("Missing the required parameter 'xUserToken' when calling getV1Tokens");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-User-Token': xUserToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserPrivilegesEntity;
      return this.apiClient.callApi(
        '/v1/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV1TokensMyBasicInfo operation.
     * @callback module:api/TokensApi~getV1TokensMyBasicInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TokensApi~getV1TokensMyBasicInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV1TokensMyBasicInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tokens/my_basic_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV1Tokens operation.
     * @callback module:api/TokensApi~postV1TokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserPrivilegesEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets authentication and privilege information for a user account
     * @param {String} xPartnerToken Your secret partner token
     * @param {String} xUsername TroopTrack user name
     * @param {String} xUserPassword Password of the user
     * @param {module:api/TokensApi~postV1TokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserPrivilegesEntity>}
     */
    postV1Tokens(xPartnerToken, xUsername, xUserPassword, callback) {
      let postBody = null;
      // verify the required parameter 'xPartnerToken' is set
      if (xPartnerToken === undefined || xPartnerToken === null) {
        throw new Error("Missing the required parameter 'xPartnerToken' when calling postV1Tokens");
      }
      // verify the required parameter 'xUsername' is set
      if (xUsername === undefined || xUsername === null) {
        throw new Error("Missing the required parameter 'xUsername' when calling postV1Tokens");
      }
      // verify the required parameter 'xUserPassword' is set
      if (xUserPassword === undefined || xUserPassword === null) {
        throw new Error("Missing the required parameter 'xUserPassword' when calling postV1Tokens");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Partner-Token': xPartnerToken,
        'X-Username': xUsername,
        'X-User-Password': xUserPassword
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserPrivilegesEntity];
      return this.apiClient.callApi(
        '/v1/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
