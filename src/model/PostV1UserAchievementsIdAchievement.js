/**
 * API title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostV1UserAchievementsIdAchievementChildrenInner from './PostV1UserAchievementsIdAchievementChildrenInner';

/**
 * The PostV1UserAchievementsIdAchievement model module.
 * @module model/PostV1UserAchievementsIdAchievement
 * @version 0.0.1
 */
class PostV1UserAchievementsIdAchievement {
    /**
     * Constructs a new <code>PostV1UserAchievementsIdAchievement</code>.
     * Details about the achievement to be updated
     * @alias module:model/PostV1UserAchievementsIdAchievement
     */
    constructor() { 
        
        PostV1UserAchievementsIdAchievement.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PostV1UserAchievementsIdAchievement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostV1UserAchievementsIdAchievement} obj Optional instance to populate.
     * @return {module:model/PostV1UserAchievementsIdAchievement} The populated <code>PostV1UserAchievementsIdAchievement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostV1UserAchievementsIdAchievement();

            if (data.hasOwnProperty('completed_on')) {
                obj['completed_on'] = ApiClient.convertToType(data['completed_on'], 'String');
            }
            if (data.hasOwnProperty('award_card_front_image_content')) {
                obj['award_card_front_image_content'] = ApiClient.convertToType(data['award_card_front_image_content'], 'String');
            }
            if (data.hasOwnProperty('award_card_images_type')) {
                obj['award_card_images_type'] = ApiClient.convertToType(data['award_card_images_type'], 'String');
            }
            if (data.hasOwnProperty('award_card_back_image_content')) {
                obj['award_card_back_image_content'] = ApiClient.convertToType(data['award_card_back_image_content'], 'String');
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [PostV1UserAchievementsIdAchievementChildrenInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostV1UserAchievementsIdAchievement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostV1UserAchievementsIdAchievement</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['completed_on'] && !(typeof data['completed_on'] === 'string' || data['completed_on'] instanceof String)) {
            throw new Error("Expected the field `completed_on` to be a primitive type in the JSON string but got " + data['completed_on']);
        }
        // ensure the json data is a string
        if (data['award_card_front_image_content'] && !(typeof data['award_card_front_image_content'] === 'string' || data['award_card_front_image_content'] instanceof String)) {
            throw new Error("Expected the field `award_card_front_image_content` to be a primitive type in the JSON string but got " + data['award_card_front_image_content']);
        }
        // ensure the json data is a string
        if (data['award_card_images_type'] && !(typeof data['award_card_images_type'] === 'string' || data['award_card_images_type'] instanceof String)) {
            throw new Error("Expected the field `award_card_images_type` to be a primitive type in the JSON string but got " + data['award_card_images_type']);
        }
        // ensure the json data is a string
        if (data['award_card_back_image_content'] && !(typeof data['award_card_back_image_content'] === 'string' || data['award_card_back_image_content'] instanceof String)) {
            throw new Error("Expected the field `award_card_back_image_content` to be a primitive type in the JSON string but got " + data['award_card_back_image_content']);
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                PostV1UserAchievementsIdAchievementChildrenInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Date the achievement was completed in YYYY-MM-DD format
 * @member {String} completed_on
 */
PostV1UserAchievementsIdAchievement.prototype['completed_on'] = undefined;

/**
 * Base 64 encoded image content of the front of an award card for the achievement. Currently ignored unless the achievement is a BSA Merit Badge.
 * @member {String} award_card_front_image_content
 */
PostV1UserAchievementsIdAchievement.prototype['award_card_front_image_content'] = undefined;

/**
 * File extension of the award card images - must be the same type for the front and back, if included. Currently ignored unless the achievement is a BSA Merit Badge.
 * @member {String} award_card_images_type
 */
PostV1UserAchievementsIdAchievement.prototype['award_card_images_type'] = undefined;

/**
 * Base 64 encoded image content of the back of an award card for the achievement. Currently ignored unless the achievement is a BSA Merit Badge.
 * @member {String} award_card_back_image_content
 */
PostV1UserAchievementsIdAchievement.prototype['award_card_back_image_content'] = undefined;

/**
 * @member {Array.<module:model/PostV1UserAchievementsIdAchievementChildrenInner>} children
 */
PostV1UserAchievementsIdAchievement.prototype['children'] = undefined;






export default PostV1UserAchievementsIdAchievement;

